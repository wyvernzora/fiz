/*
 *
 * CS-252 Fall 2015
 * fiz.l: lexical analyzer for FIZ interpreter
 * You have to extend it.
 */

%{
/********************************************************************************
 * Beginning of Section 1: C definitions to be copied to lex.yy.c               *
 ********************************************************************************/

#include <string.h>

// The "y.tab.h" file is generated by YACC after processing the .y file, and includes
// the definitions of all tokens
#include "y.tab.hh"

/********************************************************************************
 * Below is Section 2: Regular expressions and associated code                  *
 ********************************************************************************/
%}

%%
"define" { return DEFINE; }

[_a-zA-Z][_a-zA-Z0-9]* {
  yylval.string_val = strdup(yytext);
  return IDENTIFIER;
}

"(" { return OPENPAR; }

")" { return CLOSEPAR; }

0|[1-9][0-9]* {
	yylval.number_val = atoi(yytext);
	return NUMBER;
}

[ \t\n] 	{ /* Discard spaces, tabs, and new lines */ }

;.* { /* Discard comments */ }

".*$"	{ printf("Syntax error.  Did not recognize %s\n", yytext); }
